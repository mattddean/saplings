generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity", "interactiveTransactions"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model Example {
  id String @id @default(cuid())

  @@map("examples")
}

model Petition {
  id     String             @id @default(cuid())
  title  String
  images PetitionImage[]
  slug   String             @unique
  users  UsersOnPetitions[]
  body   String?            @db.Text

  @@map("petitions")
}

model PetitionImage {
  id                  String   @id @default(cuid())
  alt                 String?
  cloudinarySecureUrl String   @map("cloudinary_secure_url")
  cloudinaryUrl       String   @map("cloudinary_url")
  cloudinaryAssetId   String   @map("cloudinary_asset_id")
  position            Int
  petition            Petition @relation(fields: [petitionId], references: [id])
  petitionId          String   @map("petition_id")

  @@map("petition_images")
}

// nextauth
model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

// nextauth
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

// nextauth
model User {
  id               String             @id @default(cuid())
  name             String?
  email            String?            @unique
  emailVerified    DateTime?          @map("email_verified")
  image            String?
  accounts         Account[]
  sessions         Session[]
  petitionId       String?            @map("petition_id")
  usersOnPetitions UsersOnPetitions[]

  @@map("users")
}

model UsersOnPetitions {
  petition   Petition         @relation(fields: [petitionId], references: [id])
  petitionId String           @map("petition_id")
  user       User             @relation(fields: [userId], references: [id])
  userId     String           @map("user_id")
  createdAt  DateTime         @default(now()) @map("created_at")
  role       UserPetitionRole @relation(fields: [roleId], references: [id])
  roleId     String           @map("role_id")

  @@id([petitionId, userId])
  @@map("users_petitions")
}

model UserPetitionRole {
  id               String             @id @default(cuid())
  // see UserPetitionRoleName application-level enum for valid values
  name             String             @unique
  usersOnPetitions UsersOnPetitions[]

  @@map("user_petition_roles")
}

// nextauth
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}
